Model SysADLArchitecture;
package SysADL.types {
	value type Int {
	}
	value type Boolean {
	}
	value type String {
	}
	value type Void {
	}
	value type Real {
	}
	dimension Temperature unit Celcius {
		dimension = Temperature } unit Fahrenheit {
			dimension = Temperature } value type Temperature {
				dimension = Temperature
			}
			value type CelciusTemperature extends Temperature {
				unit = Celcius dimension = Temperature
			}
			value type FahrenheitTemperature extends Temperature {
				unit = Fahrenheit dimension = Temperature
			}
			enum Command {
				On, Off
			}
			datatype Commands {
				attributes cooler : Command heater : Command
			}
		}
		package RTCSystemConnectors {
			import RTCSystemPorts;
		connector def FahrenheitToCelciusCN {
				participants ~ source : RTCSystemPorts.FTemperatureOPT {
				}
				~ destination : RTCSystemPorts.CTemperatureIPT {
				}
				flows SysADL.types.FahrenheitTemperature from source to destination
			}
			connector def CTemperatureCN {
				participants ~ source : RTCSystemPorts.CTemperatureOPT {
				}
				~ destination : RTCSystemPorts.CTemperatureIPT {
				}
				flows SysADL.types.CelciusTemperature from source to destination
			}
			connector def DetectPresenceCN {
				participants ~ source : RTCSystemPorts.PresenceOPT {
				}
				~ destination : RTCSystemPorts.PresenceIPT {
				}
				flows SysADL.types.Boolean from source to destination
			}
			connector def SendCommandCN {
				participants ~ source : RTCSystemPorts.CommandOPT {
				}
				~ destination : RTCSystemPorts.CommandIPT {
				}
				flows SysADL.types.Command from source to destination
			}
		}
		package RTCSystemComponents {
			import RTCSystemPorts;
			import SysADL.types;
			import RTCSystemConnectors;
		component def RTCSystem {
			}
			component def PresenceSensorCP {
				ports detected : RTCSystemPorts.PresenceOPT {
				}
			}
			component def HeaterCP {
				ports controller : RTCSystemPorts.CommandIPT {
				}
			}
			component def CoolerCP {
				ports controller : RTCSystemPorts.CommandIPT {
				}
			}
			component def RoomTemperatureControllerCP {
				ports userTemp : RTCSystemPorts.CTemperatureIPT {
				}
				detected : RTCSystemPorts.PresenceIPT {
				}
				cooling : RTCSystemPorts.CommandIPT {
				}
				localTemp2 : RTCSystemPorts.CTemperatureIPT {
				}
				localTemp1 : RTCSystemPorts.CTemperatureIPT {
				}
				heating : RTCSystemPorts.CommandOPT {
				}
			}
			component def TemperatureSensorCP {
				ports current : RTCSystemPorts.FTemperatureOPT {
				}
			}
			component def userInterfaceCP {
				ports desired : RTCSystemPorts.CTemperatureOPT {
				}
			}
		}
		package RTCSystemPorts {
			import SysADL.types;
			port def FTemperatureOPT {
				flow out SysADL.types.FahrenheitTemperature
			}
			port def FTemperatureIPT {
				flow in SysADL.types.FahrenheitTemperature
			}
			port def CTemperatureOPT {
				flow out SysADL.types.CelciusTemperature
			}
			port def CTemperatureIPT {
				flow in SysADL.types.CelciusTemperature
			}
			port def PresenceOPT {
				flow out SysADL.types.Boolean
			}
			port def PresenceIPT {
				flow in SysADL.types.Boolean
			}
			port def CommandOPT {
				flow out SysADL.types.Command
			}
			port def CommandIPT {
				flow in SysADL.types.Command
			}
		}